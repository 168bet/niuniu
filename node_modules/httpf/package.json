{
  "name": "httpf",
  "description": "used in expressjs, app.use('/xxx', httpFunc({args:['string', 'string', 'callback']}, function(s1, s2, callback) {callback(null, s1+s2);}))",
  "version": "0.0.7",
  "author": {
    "name": "hhh"
  },
  "keywords": [
    "http",
    "express"
  ],
  "main": "./httpStub.js",
  "dependencies": {
    "debug": "",
    "merge": ""
  },
  "_id": "httpf@0.0.7",
  "scripts": {},
  "_shasum": "6578c44731c025c7f5a268bfc69f702b3823b2fb",
  "_from": "httpf@latest",
  "_resolved": "file:node_modules\\httpf",
  "_npmVersion": "2.5.1",
  "_nodeVersion": "0.12.0",
  "_npmUser": {},
  "dist": {
    "shasum": "298f0684e619efcc72a7c7e26e4a1e3e7b5b64f7",
    "tarball": "http://192.168.1.249/httpf/-/httpf-0.0.5.tgz"
  },
  "readmeFilename": "readme.md",
  "readme": "## httpf\n用于express，将http请求翻译成函数调用.\n\nhttpf可以接受url以及body中的参数。使用body时需要在前面加上\n\napp.use(bodyParser.urlencoded());\n\n### Usage\n```ruby\napp.all('/f1', httpf({p1:'string', p2:'number', p3:'date'}, function(p1, p2, p3, cb) {\n    assert(typeof p1==='string'\n    && typeof p2 === 'number'\n    && p3 instanceof Date);\n    \n    return 'ok';\n}));\n```\n```ruby\napp.all('/f2', httpf(['string', 'number', 'date', 'callback'], function(p1, p2, p3, cb) {\n    assert(typeof p1==='string'\n    && typeof p2 === 'number'\n    && p3 instanceof Date);\n    cb(null，'ok');\n}));\n```\n### 支持的type\n - 所有 javascript 定义的type，ie, string, number, boolean, etc\n - date, 日期, 任何可以被new Date()识别的字符串。ie. time=2015-1-2 15:00\n - object, 对象，JSON.parse可以识别的字符串 ie obj={\"a\":1, \"o\":{}}\n\n### callback\n如果在opt中包含callback，f的最后一个参数将会是回调函数，给客户端的返回值需要从这里传出。\ne.g\n```\napp.all('/f',httpf({callback:1}, function(callback) {\n    callback(null, 'ok');\n}));\n```\n否则直接通过return给出返回值\n\n### no_return \n如果含有no_return标记，httpf不向res中写入任何数据，此时f需要自行管理向客户端返回数据。这通常用于下载文件。\ne.g\n```\napp.use('/dl', httpf({name:'string', no_return:true}, function(name) {\n    require('fs').createReadStream(name).pipe(this.res);\n}));\n```\n\n### httpf.text(str[,statusCode])\n```\napp.all('/f',httpf(function() {\n    return httpf.text('hello!');\n}));\n```\n这个函数用来构造text/html类型的返回值\n\n### 客户端接受到的值\n除非定义了no_return, 总是一个json字符串\n```\n{\"result\":\"ok\"|\"error\", message:\"something\", ...}\n```\nresult='ok' 代表函数成功，返回值一般在message中，或者就是这个对象本身\n\nresult='error', 执行失败，错误在message中。\n\n#### 未来的改变\n上述返回值在下一版会被修改成\n```\n{err:\"something wrong\"} || {message:\"ok\", ...}\n```\n\n### Updates\n0.0.6 增加了跨域支持，CDN不再会缓冲httpf返回的数据\n\n从0.0.7开始。支持jsonp调用。但是不能自定义$.ajax({jsonp})这个关键字，必须是默认的'callback'。"
}
