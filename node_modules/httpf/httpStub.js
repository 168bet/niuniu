var merge = require('merge');
var assert=require('assert'), debug=require('debug')('stub');

function HttpfResult(content, status) {
	this._content=content;
	this.status=(isNaN(Number(status))?200:status);
}

HttpfResult.prototype._send =function(res) {
	res.set({'Access-Control-Allow-Origin':'*', 'Cache-Control':'max-age=0'}).status(this.status);
	if (res.usejsonp) res.jsonp(this._content===undefined?null:this._content);
	else res.send(this._content);
	res.end();
}

function createResult(status, msg) {
    var ret = { result: status };
	
	if (msg) {
		if (typeof msg === 'object' && !Array.isArray(msg)) {
			merge(ret, msg);
			if (status=='error') ret.err=msg.message;
		}
		else {
			ret.message =msg;
			if (status=='error') ret.err=msg;
		}
	}
    return new HttpfResult(ret);
}
var resultOK = createResult.bind(null, 'ok');
var resultError = createResult.bind(null, 'error');
var resultParamError = resultError('params error');

function sendErr(res, msg) {
	debug('err', msg.toString());
	if (res) {
		resultError(msg.toString())._send(res);
	}
}

function sendResult(res, msg) {
	debug('result', msg);
	if (res) {
		if (msg instanceof HttpfResult) return msg._send(res);
		resultOK(msg)._send(res);
	}
}

function sendParamError(res, e) {
	debug('param error');
	if (res) {
		if (e) {
			resultError({message:'params error', detail:e.toString()})._send(res);
		}
		else resultParamError._send(res);
	}
}

function _chkPT(t, p) {
    if (t === 'any') return true;
    if (typeof p === t) return true;
    if (!p && (t === 'callback' || t === 'no_return')) return true;
    return false;
}

function getItem(req, name) {
	if (req.body && req.body[name]) return req.body[name];
    if (req.cookies && req.cookies[name]) return req.cookies[name];
    return null;
}

function makeHttpSelf(req, res) {
	var ret ={req:req, res:res, ip:req.ip};
	if (getItem(req, 'userid')) ret.userid=ret.myID=getItem(req, 'userid');
	if (req.sl!=null) ret.sl =req.sl;
	if (req.isGm !=null) ret.isGm =req.isGm;
	
	return ret;
}

function _param(req, pn) {
	if (req.body && req.body[pn]) return req.body[pn];
	if (req.query[pn]) return req.query[pn];
	return null;
}

function httpFunc(opt, func) {
    if (typeof opt === 'function') {
        func = opt;
        opt = {};
    }
	else if (Array.isArray(opt)) opt={args:opt};
	assert(typeof opt === 'object');
	// 兼容老的语法
	if (opt.args ==null && opt.paramsType) opt.args =opt.paramsType;
	if (opt.args ==null) opt ={args:opt};
	if (Array.isArray(opt.args)) {
		var _a =opt.args;
		opt.args ={};
		for (var i=0; i<_a.length; i++) {
			if (_a[i] === true || _a[i] === 'anyType' || typeof _a[i] === 'number') _a[i] ='any';
			opt.args[i] =_a[i];
		}
	}
	if (opt.args.callback) opt.callback =opt.args.callback;
	if (opt.args.no_return) opt.no_return =opt.args.no_return;
	delete opt.args.callback;
	delete opt.args.no_return;
	debug('opt.args', opt.args);
	if (!opt.args) 
		return function (req, res) {
			if (req.query.callback) res.usejsonp=true;
/*			var pstr = req.param('param');
			var p;
			if (pstr) {
				if (typeof pstr==='string') {
					try {
						p = JSON.parse(req.param('param'));
					} catch (e) { return sendParamError(res, e) }
				}
				else if (typeof pstr === 'object') p=pstr;
			}
			if (!p) p = [];
			if (!Array.isArray(p)) return sendParamError(res);*/
			var _httpObj = makeHttpSelf(req, res);
			assert(typeof func === 'function');
			var p=[];
			if (opt.no_return) {
				func.apply(_httpObj, p);
				return true;
			}
			if (opt.callback) {
				p.push(function (err, ret) { if (err) return sendErr(res, err); sendResult(res, ret) });
				func.apply(_httpObj, p);
			}else sendResult(res, func.apply(_httpObj, p));
			return true;
		}
	else {
		assert(typeof opt.args === 'object');
		return function (req, res) {
			if (req.query.callback) res.usejsonp=true;
			var _httpObj = makeHttpSelf(req, res);
			assert(typeof func === 'function');
			//assert(typeof req.param === 'function');
			var getParam;
			if (_param(req, 'param')) {
				var _ps =_param(req, 'param');
				debug('param in', _ps);
				if (typeof (_ps) === 'string') {
					try {
						_ps =JSON.parse(decodeURIComponent(_ps));
					}catch(e) {
						sendParamError(res, e);
						return false;
					}
				}
				debug('param parsed', _ps);
				getParam =function(n) {return _ps[n];};
			}
			else getParam =function(n) {return _param(req, n);};
			var p=[];
			var idx =0;
			for (var i in opt.args) {
				debug('checking '+i+' ...');
				var param =getParam(i);
				if (param == null) param =getParam(idx);
				debug(param, opt.args[i]);
				if (opt.args[i]==='number') {
					param=Number(param);
					if (isNaN(param)) {
						sendParamError(res, i+' is not a number');
						return false;
					}
				}
				else if (opt.args[i]==='date') {
					param =new Date(param);
					if ((param.toString())=='Invalid Date') {
						sendParamError(res, i+' is not a date');
						return false;
					}
				}
				else if (opt.args[i]==='object') {
					try {
					param =JSON.parse(param);
					} catch(e) {
						sendParamError(res, i+' is not a object '+e.toString());
						return false;
					}
				}
				else if (!_chkPT(opt.args[i], param)) {
					sendParamError(res, i+' should be a '+opt.args[i]);
					return false;
				}
				p.push(param);
				idx++;
			}

			if (opt.no_return) {
				func.apply(_httpObj, p);
				return true;
			}
			if (opt.callback) {
				p.push(function (err, ret) { if (err) return sendErr(res, err); sendResult(res, ret) });
				func.apply(_httpObj, p);
			}else sendResult(res, func.apply(_httpObj, p));
			return true;
		}
	}
}

httpFunc.createResult =createResult;
httpFunc.resultOK = resultOK;
httpFunc.resultError = resultError;
httpFunc.resultParamError =resultParamError;
httpFunc.text =function(str, statusCode) {
	return new HttpfResult(str, statusCode);
}

module.exports =httpFunc;

if (module===require.main) {
	var express =require('express');
	var app =express(),bodyparser=require('body-parser');
	
	app.use(bodyparser.urlencoded({ extended: false }));
	app.use('/test', httpFunc({s1:'string', s2:'string'}, function(s1, s2) {return httpFunc.text(s1+s2);}));
	
	app.listen(80);
	console.log('browser url http://127.0.0.1/test to verify');
	//console.log(merge({result:'ok'}, [1, 2, 3]));
}
